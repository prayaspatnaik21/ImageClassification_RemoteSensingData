{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 94,
      "metadata": {
        "id": "hXNJVO-2z9GK"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "import tensorflow_datasets as tfds\n",
        "from tensorflow import keras\n",
        "import os\n",
        "from shutil import copyfile\n",
        "import random\n",
        "import cv2\n",
        "from sklearn.utils import shuffle\n",
        "import seaborn as sns\n",
        "import sys\n",
        "from keras.applications.vgg16 import VGG16\n",
        "from keras.applications.inception_v3 import InceptionV3\n",
        "from keras.applications.vgg16 import preprocess_input\n",
        "from glob import glob\n",
        "from keras.preprocessing.image import ImageDataGenerator,load_img\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Conv2D , AveragePooling2D,Flatten,Dense , Activation , MaxPool2D, BatchNormalization , Dropout,ZeroPadding2D ,Input\n",
        "from functools import partial\n",
        "from keras.callbacks import ModelCheckpoint , LearningRateScheduler\n",
        "from keras.callbacks import ReduceLROnPlateau"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8PzdhOl30Z1k"
      },
      "source": [
        "#Getting the Name of the Folders"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 95,
      "metadata": {
        "id": "0bk_ZH-C0Yb7"
      },
      "outputs": [],
      "source": [
        "dataPath = \"/content/drive/MyDrive/Datasets/NWPU-RESISC45/\"\n",
        "\n",
        "classFolder = [name for name in os.listdir(dataPath) if os.path.isdir(os.path.join(dataPath,name))]\n",
        "destFolder = ['training','testing']"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Names of the Classes"
      ],
      "metadata": {
        "id": "eDP3RmsB-Z9d"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 96,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tZl5ca5DZOGE",
        "outputId": "1c52ed34-57dd-485c-be7b-969d305f0efb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['tennis_court',\n",
              " 'mobile_home_park',\n",
              " 'church',\n",
              " 'meadow',\n",
              " 'airplane',\n",
              " 'basketball_court',\n",
              " 'wetland',\n",
              " 'sparse_residential',\n",
              " 'mountain',\n",
              " 'overpass']"
            ]
          },
          "metadata": {},
          "execution_count": 96
        }
      ],
      "source": [
        "classFolder[:10]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 97,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KTELArCjt_17",
        "outputId": "08cd1740-6722-477a-d193-a0adb515d936"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['training', 'testing']"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ],
      "source": [
        "destFolder"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# One Time Creation(Create Training and Testing Folder)"
      ],
      "metadata": {
        "id": "Du0OinbomUwt"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 98,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oHDEEFwhC7bq",
        "outputId": "f61b32a4-7821-4510-b682-33392dff7007"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/Datasets/NWPU-RESISC45/training Created\n",
            "/content/drive/MyDrive/Datasets/NWPU-RESISC45/testing Created\n"
          ]
        }
      ],
      "source": [
        "to_create = {\n",
        "    'train_root' : '/content/drive/MyDrive/Datasets/NWPU-RESISC45/training',\n",
        "    'test_root' : '/content/drive/MyDrive/Datasets/NWPU-RESISC45/testing'\n",
        "}\n",
        "\n",
        "for directory in to_create.values():\n",
        "  try:\n",
        "    os.mkdir(directory)\n",
        "    print(directory,'Created')\n",
        "  except:\n",
        "    print(directory,'Failed')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ndNex1BF19IM"
      },
      "source": [
        "#  Copying Files to Training and Testing folder"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 99,
      "metadata": {
        "id": "lRqEGh-Y0etY"
      },
      "outputs": [],
      "source": [
        "def split_data_copy_folder(commFolder,classFolder,destFolder,split_size):\n",
        "  files = []\n",
        "\n",
        "  for classF in classFolder[:10]:\n",
        "    os.mkdir(commFolder + destFolder[0]+'/'+classF)\n",
        "    os.mkdir(commFolder + destFolder[1]+'/'+classF)\n",
        "\n",
        "    trainDir = commFolder + destFolder[0] + '/' + classF\n",
        "    testDir = commFolder + destFolder[1] + '/' + classF\n",
        "\n",
        "    for image in os.listdir(commFolder+classF):\n",
        "      imagePath = os.path.join(commFolder+classF+'/'+image)\n",
        "      if os.path.getsize(imagePath):\n",
        "        files.append(image)\n",
        "      else:\n",
        "        print(f\"{image} has zero size\")\n",
        "    \n",
        "    total_files = len(files)\n",
        "    split = int(total_files * split_size)\n",
        "    shuffled = random.sample(files,total_files)\n",
        "    train = shuffled[:split]\n",
        "    test = shuffled[split:]\n",
        "\n",
        "    for image in train:\n",
        "      copyfile(os.path.join(commFolder,classF,image),os.path.join(trainDir,image))\n",
        "\n",
        "    for image in test:\n",
        "      copyfile(os.path.join(commFolder,classF,image),os.path.join(testDir,image))\n",
        "\n",
        "    print(f\"{classF} Done\")\n",
        "    files.clear()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 100,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2VuWm_ts3Hzw",
        "outputId": "78463731-24e4-4484-b94c-bb652f553cee"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tennis_court Done\n",
            "mobile_home_park Done\n",
            "church Done\n",
            "meadow Done\n",
            "airplane Done\n",
            "basketball_court Done\n",
            "wetland Done\n",
            "sparse_residential Done\n",
            "mountain Done\n",
            "overpass Done\n"
          ]
        }
      ],
      "source": [
        "split_data_copy_folder(dataPath,classFolder,destFolder,0.7)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tm_74C3tArQx"
      },
      "source": [
        "# Data Functionalities"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 101,
      "metadata": {
        "id": "seZs2QONvYRl"
      },
      "outputs": [],
      "source": [
        "class DataFunctionalities():\n",
        "  def __init__(self,rootPathTrain,rootPathTest,noOfClasses):\n",
        "    self.rootPath = [rootPathTrain,rootPathTest]\n",
        "    self.noOfClasses = noOfClasses\n",
        "    self.trainX , self.trainy , self.testX , self.testy = self.loadingData()\n",
        "\n",
        "  \n",
        "  def loadingData(self):\n",
        "\n",
        "    \"\"\" \n",
        "        Performs Loading of the Data into numpy arrays , segregating Training and Testing Data\n",
        "        Parameters : string , string (Takes TrainingDataPath and TestingDataPath)\n",
        "        Return : Numpy Arrays containing training data , training labels, testing data , testing labels \n",
        "    \"\"\"\n",
        "\n",
        "    dataX = []\n",
        "    datay = []\n",
        "\n",
        "    for path in self.rootPath:  \n",
        "\n",
        "      X = []\n",
        "      y = []\n",
        "      categories = os.listdir(path)\n",
        "\n",
        "      for index , category in enumerate(categories):\n",
        "        imgPath = os.path.join(path, category)\n",
        "        images = os.listdir(imgPath)\n",
        "\n",
        "        for  image in images:\n",
        "          img = cv2.imread(os.path.join(imgPath,image),1)\n",
        "          img = cv2.resize(img,(224,224))\n",
        "          X.append(img)\n",
        "          y.append(index)\n",
        "      \n",
        "      dataX.append(X)\n",
        "      datay.append(y)\n",
        "    return np.array(dataX[0]),np.array(datay[0]),np.array(dataX[1]), np.array(datay[1])\n",
        "\n",
        "  def shuffleDataSet(self):\n",
        "    \"\"\" \n",
        "        Shuffle the data for better training\n",
        "        Parameters : numpy array , numpy array (array of images,array of labels)\n",
        "        Return : shuffled array of images , shuffled array of labels\n",
        "    \"\"\"\n",
        "    shuffledX, shuffledy = shuffle(self.trainX,self.trainy)\n",
        "    return shuffledX,shuffledy\n",
        "\n",
        "  def LengthOfData(self):\n",
        "    \"\"\"\n",
        "      Length of the training and testing Data\n",
        "      Parameters : numpy array, numpy array (training data, testing data)\n",
        "    \"\"\"\n",
        "\n",
        "    print(f\"Length of the Training Set Featurue {len(self.trainX)} Lable {len(self.trainy)}\")\n",
        "    print(f\"Length of the Training Set Featurue {len(self.testX)} Lable {len(self.testy)}\")\n",
        "\n",
        "  def shapeOfData(self):\n",
        "    \"\"\"\n",
        "      Shape of the Data\n",
        "      Parameters : numpy array , numpy array (training data,testing data)\n",
        "    \"\"\"\n",
        "    print(f\"Shape of the Training Data is Feaure {self.trainX.shape} Target {self.trainy.shape}\")\n",
        "    print(f\"Shape of the Testing Data is Feaure {self.testX.shape} Target {self.testy.shape}\")    \n",
        "\n",
        "  def PlotTrainingData(self):\n",
        "    \"\"\" \n",
        "      Plot 12 training Data\n",
        "      Parameters : numpy array (training data)\n",
        "    \"\"\"\n",
        "    fig = plt.figure(figsize = (20,20))\n",
        "\n",
        "    for index in range(12):\n",
        "      ax = fig.add_subplot(3,4,index + 1,xticks = [],yticks = [])\n",
        "      ax.imshow(self.trainX[index])\n",
        "      ax.set_title(str(classFolder[self.trainy[index]]))\n",
        "\n",
        "  def oneHotEncoding(self):\n",
        "    \"\"\"\n",
        "      One hot Encoding of the label\n",
        "      Parameters : numpy array , numpy array (self.trainy , self.trainy)\n",
        "    \"\"\"\n",
        "    oneHotEncodedDataTrain = tf.one_hot(self.trainy, self.noOfClasses)\n",
        "    oneHotEncodedDataTest = tf.one_hot(self.testy, self.noOfClasses)\n",
        "    return oneHotEncodedDataTrain , oneHotEncodedDataTest \n",
        "\n",
        "  def PlotForModel(self,history,type):\n",
        "    \"\"\"\n",
        "      Plotting Training accuracy and Vaidation accuracy wrt epoch\n",
        "              Training Loss and Validation loss wrt epoch\n",
        "      Parameters : history , type (model history , type (metric))\n",
        "    \"\"\"\n",
        "    if(type == \"accuracy\"):\n",
        "      plt.plot(history.history['accuracy'])\n",
        "      plt.plot(history.history['val_accuracy'])\n",
        "    elif (type == \"loss\"):\n",
        "      plt.plot(history.history['loss'])\n",
        "      plt.plot(history.history['val_loss'])\n",
        "    else:\n",
        "      print(\"Invalid Type\")\n",
        "    \n",
        "    plt.title(\"model\" + type)\n",
        "    plt.ylabel(type)\n",
        "    plt.xlabel('epoch')\n",
        "    plt.legend(['train','test'],loc = 'upper left')\n",
        "    plt.show()\n",
        "\n",
        "  def SingleValueDecomposition(self,Data,num_components):\n",
        "    \"\"\"\n",
        "      Single Value decomposition of the image\n",
        "    \"\"\"\n",
        "    gray_image = cv2.cvtColor(Data,cv2.COLOR_BGR2GRAY)\n",
        "    img_mat = np.array(list(gray_image),float)\n",
        "    Image_scaled = (img_mat - img_mat.mean())/ (img_mat.std())\n",
        "    U,s,V = np.linalg.svd(Image_scaled)\n",
        "    var_explained = np.round(s**2/np.sum(s**2),decimals = 3)\n",
        "    reconstructed_img = np.array(U[:,:num_components]).dot(np.diag(s[:num_components]).dot(np.array(V[:num_components,:])))\n",
        "    return var_explained , reconstructed_img\n",
        "\n",
        "  def SVDplot(self,var,index):\n",
        "    \"\"\"\n",
        "      Plot of the variance explained by eigen vectors of the image\n",
        "    \"\"\"\n",
        "    sns.barplot(x=list(range(1,index + 1)),y=var[0:index])\n",
        "    plt.xlabel('Singular Vector')\n",
        "    plt.ylabel('Variance Explained')\n",
        "    plt.tight_layout()\n",
        "\n",
        "  def showImage(self,image):\n",
        "    \"\"\"\n",
        "      Show Image using matplotlib libarary\n",
        "    \"\"\"\n",
        "    plt.imshow(image)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Create Data Functionality Object"
      ],
      "metadata": {
        "id": "OsXXLbkXJrDS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "TrainingDataPath = dataPath + '/' + destFolder[0]\n",
        "TestingDataPath = dataPath + '/' + destFolder[1]\n",
        "DataF=DataFunctionalities(TrainingDataPath,TestingDataPath,10)"
      ],
      "metadata": {
        "id": "6P0MXZwvsU7N"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Shuffle Data Set"
      ],
      "metadata": {
        "id": "BI5_UfBzJwfV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train , y_train = DataF.shuffleDataSet()"
      ],
      "metadata": {
        "id": "iD3F6Nv7gbgt"
      },
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Shape of the Data Set"
      ],
      "metadata": {
        "id": "X9U9dEwrKMsp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "DataF.shapeOfData()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Is3Vm1YOc1TN",
        "outputId": "538f81ab-bb5f-4464-cea3-ba855de6ae74"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of the Training Data is Feaure (4890, 224, 224, 3) Target (4890,)\n",
            "Shape of the Testing Data is Feaure (2110, 224, 224, 3) Target (2110,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# One Hot Encoding of the Labels"
      ],
      "metadata": {
        "id": "6JlOpnOGKPYi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_train , y_test = DataF.oneHotEncoding()"
      ],
      "metadata": {
        "id": "rmY5r_bMht9M"
      },
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Single value decomposition of a Sample Image"
      ],
      "metadata": {
        "id": "ROdZib5yKSPQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "var_explained , reconstructed_image = DataF.SingleValueDecomposition(X_train[0],30)"
      ],
      "metadata": {
        "id": "Hlt-C9k9kq01"
      },
      "execution_count": 106,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "DataF.showImage(reconstructed_image)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "ty4LuqVzk5ss",
        "outputId": "ddc4255c-8d7d-4379-c806-ae3b1fd5d93e"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Variance plot of the Eigen Vectors"
      ],
      "metadata": {
        "id": "WqzssbJCKXvd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "DataF.SVDplot(var_explained,20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "KBGurTUFk_ZN",
        "outputId": "6ef91579-c981-419d-b766-ecd319644b46"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Functionalities"
      ],
      "metadata": {
        "id": "jdYGgL8XDsMa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class ModelFunctionalities():\n",
        "  def __init__(self,model,data,loss = 'categorical_crossentropy',optimizer ='sgd',metrics = 'accuracy',batch_size_train = 32,batch_size_validation = 8,epochs = 20,callbacks = None):\n",
        "    self.model = model\n",
        "    self.data = data\n",
        "    self.loss = loss\n",
        "    self.optimizer = optimizer\n",
        "    self.metrics = metrics\n",
        "    self.callbacks = callbacks\n",
        "    self.batch_size_train = batch_size_train\n",
        "    self.batch_size_validation = batch_size_validation\n",
        "    self.epochs = epochs\n",
        "    self.callbacks = []\n",
        "    self.imagedatagen = self.DataAugmentation()\n",
        "\n",
        "    if callbacks is None:\n",
        "      checkpoint = ModelCheckpoint(filepath = 'TransferModel.h5', save_best_only = True)\n",
        "      lr_reducer = ReduceLROnPlateau(factor = np.sqrt(0.01),cooldown = 0 , patience = 5,min_lr = 0.5e-5)\n",
        "      self.callbacks = [checkpoint,lr_reducer]\n",
        "  \n",
        "  def DataAugmentation(self):\n",
        "    Imagedatagen = ImageDataGenerator(featurewise_center=True,rotation_range=20,width_shift_range=0.1,height_shift_range=0.1,horizontal_flip=True,validation_split=0.2)\n",
        "    Imagedatagen.fit(self.data[0])\n",
        "    return Imagedatagen\n",
        "  \n",
        "  def CompileModel(self):\n",
        "    self.model.compile(loss = self.loss,optimizer=self.optimizer,metrics = self.metrics)\n",
        "\n",
        "  def FitModel(self):\n",
        "    history = self.model.fit(self.imagedatagen.flow(self.data[0], self.data[1], batch_size=self.batch_size_train,\n",
        "         subset='training'),\n",
        "         validation_data=self.imagedatagen.flow(self.data[0], self.data[1],\n",
        "         batch_size=self.batch_size_validation, subset=\"validation\"),callbacks = self.callbacks,\n",
        "         epochs=self.epochs)\n",
        "    \n",
        "  def ModelArchitectureFig(self):\n",
        "      plotfig=tf.keras.utils.plot_model(self.model,f\"{self.model}.png\",show_shapes = True)\n",
        "      return plotfig\n",
        "  \n",
        "  def EvaluateModel(self):\n",
        "    score = self.model.evaluate(self.data[2],self.data[3])\n",
        "    return score\n",
        "  \n",
        "  def ModelSummary(self):\n",
        "    return self.model.summary()"
      ],
      "metadata": {
        "id": "ZrBTrNPhDvm-"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Creating Callbacks"
      ],
      "metadata": {
        "id": "MrSYiiE_onmc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "K = tf.keras.backend\n",
        "class  ExponentialDecay(tf.keras.callbacks.Callback):\n",
        "  def __init__(self, s = 40000):\n",
        "    super().__init__()\n",
        "    self.s = s\n",
        "  \n",
        "  def on_batch_begin(self,batch,logs = None):\n",
        "    lr = K.get_value(self.model.optimizer.learning_rate)\n",
        "    K.set_value(self.model.optimizer.learning_rate , lr*0.1**(1/self.s))\n",
        "  \n",
        "  def on_epoch_end(self,epoch,logs = None):\n",
        "    logs = logs or {}\n",
        "    logs['learning_rate'] = K.get_value(self.model.optimizer.learning_rate)"
      ],
      "metadata": {
        "id": "_H1SmVE4-Zis"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_5c7qQAUApak"
      },
      "source": [
        "# Simple Model Architecture"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H1wy1Ckr3S38"
      },
      "outputs": [],
      "source": [
        "modelCNN_1 = tf.keras.models.Sequential()\n",
        "modelCNN_1.add(tf.keras.layers.Conv2D(10,kernel_size = (3,3),activation = 'relu',input_shape = (224,224,3)))\n",
        "modelCNN_1.add(tf.keras.layers.BatchNormalization())\n",
        "modelCNN_1.add(tf.keras.layers.Dropout(0.4))\n",
        "\n",
        "modelCNN_1.add(tf.keras.layers.Conv2D(16,kernel_size=(3,3),activation = 'relu'))\n",
        "modelCNN_1.add(tf.keras.layers.BatchNormalization())\n",
        "modelCNN_1.add(tf.keras.layers.Dropout(0.4))\n",
        "\n",
        "modelCNN_1.add(tf.keras.layers.Conv2D(10,kernel_size=(3,3),activation = 'relu'))\n",
        "modelCNN_1.add(tf.keras.layers.MaxPool2D(pool_size=(3,3)))\n",
        "\n",
        "modelCNN_1.add(tf.keras.layers.Conv2D(16,kernel_size = (3,3),activation = 'relu'))\n",
        "modelCNN_1.add(tf.keras.layers.BatchNormalization())\n",
        "modelCNN_1.add(tf.keras.layers.Dropout(0.4))\n",
        "\n",
        "modelCNN_1.add(tf.keras.layers.Flatten())\n",
        "modelCNN_1.add(tf.keras.layers.Dense(220,activation='relu'))\n",
        "\n",
        "modelCNN_1.add(tf.keras.layers.Dense(10,activation = 'softmax'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jXSiPXQ4EpOU"
      },
      "outputs": [],
      "source": [
        "modelCNN_2 = tf.keras.models.Sequential()\n",
        "modelCNN_2.add(tf.keras.layers.Conv2D(10,kernel_size = (3,3),activation = 'relu',input_shape = (224,224,3)))\n",
        "modelCNN_2.add(tf.keras.layers.BatchNormalization())\n",
        "\n",
        "modelCNN_2.add(tf.keras.layers.Conv2D(16,kernel_size=(3,3),activation = 'relu'))\n",
        "modelCNN_2.add(tf.keras.layers.BatchNormalization())\n",
        "\n",
        "modelCNN_2.add(tf.keras.layers.Conv2D(10,kernel_size=(3,3),activation = 'relu'))\n",
        "modelCNN_2.add(tf.keras.layers.MaxPool2D(pool_size=(3,3)))\n",
        "\n",
        "modelCNN_2.add(tf.keras.layers.Conv2D(16,kernel_size = (3,3),activation = 'relu'))\n",
        "modelCNN_2.add(tf.keras.layers.BatchNormalization())\n",
        "\n",
        "modelCNN_2.add(tf.keras.layers.Flatten())\n",
        "modelCNN_2.add(tf.keras.layers.Dense(220,activation='relu'))\n",
        "\n",
        "modelCNN_2.add(tf.keras.layers.Dense(10,activation = 'softmax'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6tIaSxYJzQD4"
      },
      "source": [
        "# VGG Architecuture"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LZMDMRTUesIl"
      },
      "outputs": [],
      "source": [
        "modelVGG = Sequential()\n",
        "\n",
        "\n",
        "#First Block\n",
        "modelVGG.add(Conv2D(filters=64,kernel_size=(3,3),strides = (1,1),activation = 'relu',padding='same',input_shape = (224,224,3)))\n",
        "modelVGG.add(Conv2D(filters=64,kernel_size = (3,3),strides = (1,1),activation = 'relu',padding='same'))\n",
        "modelVGG.add(MaxPool2D(pool_size=(2,2),strides = (2,2)))\n",
        "\n",
        "#second Block\n",
        "modelVGG.add(Conv2D(filters=128,kernel_size = (3,3),strides = (1,1),activation = 'relu',padding = 'same'))\n",
        "modelVGG.add(Conv2D(filters = 128,kernel_size = (3,3),strides = (1,1),activation = 'relu',padding = 'same'))\n",
        "modelVGG.add(MaxPool2D(pool_size = (2,2),strides = (2,2)))\n",
        "\n",
        "#third block\n",
        "modelVGG.add(Conv2D(filters = 256 , kernel_size = (3,3) , strides = (1,1), activation = 'relu',padding = 'same'))\n",
        "modelVGG.add(Conv2D(filters = 256, kernel_size = (3,3),strides = (1,1),activation = 'relu',padding = 'same'))\n",
        "modelVGG.add(Conv2D(filters = 256, kernel_size = (3,3),strides = (1,1),activation = 'relu',padding = 'same'))\n",
        "modelVGG.add(MaxPool2D(pool_size = (2,2),strides = (2,2)))\n",
        "\n",
        "#Fourth Block\n",
        "modelVGG.add(Conv2D(filters = 512, kernel_size = (3,3),strides = (1,1),activation = 'relu',padding = 'same'))\n",
        "modelVGG.add(Conv2D(filters = 512, kernel_size = (3,3),strides = (1,1),activation = 'relu',padding = 'same'))\n",
        "modelVGG.add(Conv2D(filters = 512 , kernel_size = (3,3), strides = ( 1,1),activation = 'relu',padding = 'same'))\n",
        "modelVGG.add(MaxPool2D(pool_size = (2,2),strides = (2,2)))\n",
        "\n",
        "#fifth Block\n",
        "modelVGG.add(Conv2D(filters = 512 , kernel_size = (3,3),strides = (1,1) ,activation = 'relu',padding = 'same'))\n",
        "modelVGG.add(Conv2D(filters = 512 , kernel_size = (3,3),strides = (1,1),activation = 'relu' , padding = 'same'))\n",
        "modelVGG.add(Conv2D(filters = 512 , kernel_size = (3,3),strides = (1,1),activation = 'relu' , padding = 'same'))\n",
        "modelVGG.add(MaxPool2D(pool_size = (2,2),strides = (2,2)))\n",
        "\n",
        "# Classifier\n",
        "modelVGG.add(Flatten())\n",
        "modelVGG.add(Dense(256, activation = 'relu'))\n",
        "modelVGG.add(Dropout(0.5))\n",
        "modelVGG.add(Dense(256,activation = 'relu'))\n",
        "modelVGG.add(Dropout(0.5))\n",
        "modelVGG.add(Dense(10,activation = 'softmax'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bl-XBO4r4Hud"
      },
      "source": [
        "# In the right direction , Let's tweak Optimizer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a8MZX-OA7hMb"
      },
      "outputs": [],
      "source": [
        "optimizer = tf.keras.optimizers.SGD(learning_rate = 0.01,momentum = 0.9,nesterov= True,name='SGD')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Adding Residual Network"
      ],
      "metadata": {
        "id": "HG9kO5fH9dHr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from functools import partial\n",
        "from keras.callbacks import ModelCheckpoint , LearningRateScheduler\n",
        "from keras.callbacks import ReduceLROnPlateau\n",
        "\n",
        "DefaultConv2D = partial(tf.keras.layers.Conv2D,kernel_size = 3,activation = 'relu',padding='SAME')\n",
        "\n",
        "class ResidualNetwork(tf.keras.layers.Layer):\n",
        "  def __init__(self,filters,strides = 1, activation = \"relu\",**kwargs):\n",
        "    super().__init__(**kwargs)\n",
        "    self.activation = tf.keras.activations.get(activation)\n",
        "    self.main_layers = [\n",
        "                        DefaultConv2D(filters , strides = strides),\n",
        "                        tf.keras.layers.BatchNormalization(),\n",
        "                        self.activation,\n",
        "                        DefaultConv2D(filters),\n",
        "                        tf.keras.layers.BatchNormalization()]\n",
        "    self.skip_layers = []\n",
        "    if strides > 1:\n",
        "      self.skip_layers = [\n",
        "                          DefaultConv2D(filters , kernel_size = 1, strides = strides),\n",
        "                          tf.keras.layers.BatchNormalization()]\n",
        "  \n",
        "  def call(self,inputs):\n",
        "    X = inputs\n",
        "    for layer in self.main_layers:\n",
        "      X = layer(X)\n",
        "    skip_X = inputs\n",
        "\n",
        "    for layer in self.skip_layers:\n",
        "      skip_X = layer(skip_X)\n",
        "    return self.activation(X + skip_X)\n",
        "\n",
        "  def get_config(self):\n",
        "    base_config = super().get_config()\n",
        "    return {**base_config , \"activation\":self.activation}"
      ],
      "metadata": {
        "id": "pwT4tjQn9bt1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Squeeze Excitation Layer"
      ],
      "metadata": {
        "id": "FrbMyzDQ9rNp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class SqueezeExcitationLayer(tf.keras.layers.Layer):\n",
        "  def __init__(self,filters,reductionRatio,activation = \"relu\",**kwargs):\n",
        "    super().__init__(**kwargs)\n",
        "    self.activation = tf.keras.activations.get(activation)\n",
        "    self.SenetLayer = [\n",
        "                       tf.keras.layers.Dense(filters/reductionRatio,kernel_initializer = \"he_normal\"),\n",
        "                       tf.keras.layers.ReLU(),\n",
        "                       tf.keras.layers.Dense(filters,kernel_initializer = \"he_normal\"),\n",
        "    ]\n",
        "\n",
        "    def call(self,inputs):\n",
        "      X = inputs\n",
        "      for layer in self.SenetLayer:\n",
        "        X = layer(X)\n",
        "      X = tf.keras.activations.sigmoid(X)\n",
        "      \n",
        "      X = tf.reshape(X,[-1,1,1,filters])\n",
        "      scale = inputs * X\n",
        "      return scale\n",
        "    \n",
        "    def get_config(self):\n",
        "      base_config = super().get_config()\n",
        "      return {**base_config , \"activation\":self.activation}"
      ],
      "metadata": {
        "id": "SlkpvqML9peX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Creating GoogleNet architecture"
      ],
      "metadata": {
        "id": "CAaSsazQBqVu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Kernel and Bias Initializer"
      ],
      "metadata": {
        "id": "AmQDzkUFCUfH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "kernel_init = tf.keras.initializers.glorot_uniform()\n",
        "bias_init = tf.keras.initializers.Constant(value = 0.2)"
      ],
      "metadata": {
        "id": "8KZvOCcaCW-z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Inception Module"
      ],
      "metadata": {
        "id": "OEFs6rV5CHgY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.backend import concatenate\n",
        "def inceptionModule(x,filters_1x1,filters_3x3_reduce,filters_3x3,filters_5x5_reduce,filters_5x5,filters_pool_proj,name=None):\n",
        "  conv1x1 = Conv2D(filters_1x1,(1,1),padding=\"same\",activation = 'relu',kernel_initializer= kernel_init,bias_initializer=bias_init)(x)\n",
        "\n",
        "  conv3x3 = Conv2D(filters_3x3_reduce,(1,1),padding=\"same\",activation = 'relu',kernel_initializer= kernel_init,bias_initializer=bias_init)(x)\n",
        "  conv3x3 = Conv2D(filters_3x3,(3,3),padding=\"same\",activation = 'relu',kernel_initializer= kernel_init,bias_initializer=bias_init)(conv3x3)\n",
        "\n",
        "  conv5x5 = Conv2D(filters_5x5_reduce,(1,1),padding=\"same\",activation = 'relu',kernel_initializer= kernel_init,bias_initializer=bias_init)(x)\n",
        "  conv5x5 = Conv2D(filters_5x5_reduce,(5,5),padding=\"same\",activation = 'relu',kernel_initializer= kernel_init,bias_initializer=bias_init)(conv5x5)\n",
        "\n",
        "  pool_proj = MaxPool2D((3,3),strides = (1,1),padding = 'same')(x)\n",
        "  pool_proj = Conv2D(filters_pool_proj,(1,1),padding = 'same' , activation = 'relu' , kernel_initializer=kernel_init,bias_initializer = bias_init)(pool_proj)\n",
        "\n",
        "  output = tf.concat([conv1x1,conv3x3,conv5x5,pool_proj],axis = 3 , name=name)\n",
        "\n",
        "  return output"
      ],
      "metadata": {
        "id": "1v3kvjXaCKZy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "input_layer = Input(shape = (224,224,3))\n",
        "x = Conv2D(64,(7,7),padding = 'same' ,strides = (2,2),activation='relu',name = 'conv_1_7x7_2',kernel_initializer=kernel_init,bias_initializer = bias_init)(input_layer)\n",
        "x = MaxPool2D((3,3),padding = 'same' , strides = (2,2),name = 'max_pool_1_3x3/2')(x)\n",
        "x = Conv2D(192,(3,3),padding = 'same' , strides = (1,1),activation = 'relu',name='conv_2b_3x3/1')(x)\n",
        "x = MaxPool2D((3,3),padding='same',strides = (2,2),name = 'max_pool_2_3x3/2')(x)\n",
        "\n",
        "x = inceptionModule(x,filters_1x1 = 64,filters_3x3_reduce = 96,filters_3x3 = 128,filters_5x5_reduce = 16,filters_5x5 = 32,filters_pool_proj = 32,name='inception_3a')\n",
        "x = inceptionModule(x,filters_1x1=128,filters_3x3_reduce=128,filters_3x3=192,filters_5x5_reduce=32,filters_5x5=96,filters_pool_proj= 64,name='inception_3b')\n",
        "\n",
        "x = MaxPool2D((3,3),padding='same',strides = (2,2),name = 'max_pool_3_3x3/2')(x)\n",
        "\n",
        "x = inceptionModule(x,filters_1x1=128,filters_3x3_reduce=128,filters_3x3=192,filters_5x5_reduce=32,filters_5x5=96,filters_pool_proj= 64,name='inception_4a')\n",
        "\n",
        "classifier_1 = AveragePooling2D((5,5),strides = 3)(x)\n",
        "classifier_1 = Conv2D(128,(1,1),padding='same',activation = 'relu')(classifier_1)\n",
        "classifier_1 = Flatten()(classifier_1)\n",
        "classifier_1 = Dense(1024,activation = 'relu')(classifier_1)\n",
        "classifier_1 = Dropout(0.7)(classifier_1)\n",
        "classifier_1 = Dense(10,activation = 'softmax',name = 'auxiliary_output_1')(classifier_1)\n",
        "\n",
        "x = inceptionModule(x,filters_1x1=160,filters_3x3_reduce=112,filters_3x3=224,filters_5x5_reduce=24,filters_5x5=64,filters_pool_proj= 64,name='inception_4b')\n",
        "x = inceptionModule(x,filters_1x1=128,filters_3x3_reduce=128,filters_3x3=256,filters_5x5_reduce=24,filters_5x5=64,filters_pool_proj= 64,name='inception_4c')\n",
        "x = inceptionModule(x,filters_1x1=112,filters_3x3_reduce=144,filters_3x3=288,filters_5x5_reduce=32,filters_5x5=64,filters_pool_proj= 64,name='inception_4d')\n",
        "\n",
        "classifier_2 = AveragePooling2D((5,5),strides = 3)(x)\n",
        "classifier_2 = Conv2D(128,(1,1),padding='same',activation = 'relu')(classifier_2)\n",
        "classifier_2 = Flatten()(classifier_2)\n",
        "classifier_2 = Dense(1024,activation = 'relu')(classifier_2)\n",
        "classifier_2 = Dropout(0.7)(classifier_2)\n",
        "classifier_2 = Dense(10,activation = 'softmax',name = 'auxiliary_output_1')(classifier_2)\n",
        "\n",
        "x = MaxPool2D((3,3),padding='same',strides = (2,2),name = 'max_pool_4_3x3/2')(x)\n",
        "x = inceptionModule(x,filters_1x1=256,filters_3x3_reduce=160,filters_3x3=320,filters_5x5_reduce=32,filters_5x5=128,filters_pool_proj= 128,name='inception_5a')\n",
        "x = inceptionModule(x,filters_1x1=384,filters_3x3_reduce=192,filters_3x3=384,filters_5x5_reduce=48,filters_5x5=128,filters_pool_proj= 128,name='inception_5b')\n",
        "\n",
        "x = AveragePooling2D((7,7),padding='valid',strides = (1,1),name = 'avg_pool_5_3x3/1')(x)\n",
        "\n",
        "x = Flatten()(x)\n",
        "x = Dense(0.4)(x)\n",
        "x = Dense(256,activation = 'relu' , name = 'linear')(x)\n",
        "output = Dense(10, activation = 'softmax',name = 'output')(x)"
      ],
      "metadata": {
        "id": "2Q2n7Nn9BofK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "modelFunctionAPIs = tf.keras.models.Model(inputs = [input_layer],outputs = [output])"
      ],
      "metadata": {
        "id": "s-Rc6VbHCtaJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "boq2eUW2D9WA"
      },
      "source": [
        "# Transfer Learning"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XETLJUmSd4xw"
      },
      "outputs": [],
      "source": [
        "IMAGE_SIZE = [224,224]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tdwm8NS2FSfd",
        "outputId": "6908976b-b609-4381-8b76-aff4e3867929"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
            "58892288/58889256 [==============================] - 1s 0us/step\n",
            "58900480/58889256 [==============================] - 1s 0us/step\n"
          ]
        }
      ],
      "source": [
        "vgg = VGG16(input_shape = IMAGE_SIZE + [3],weights = 'imagenet',include_top = False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ybX3olOTDOlQ"
      },
      "outputs": [],
      "source": [
        "for layer in vgg.layers:\n",
        "  layer.trainable = False"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6H4t_tLCG4_4",
        "outputId": "b2c96d16-ec4b-4255-8ec9-235dd457c8aa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n"
          ]
        }
      ],
      "source": [
        "folders = glob('/content/drive/MyDrive/Datasets/NWPU-RESISC45/training/*')\n",
        "print(len(folders))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lWkwRatiG_4M"
      },
      "outputs": [],
      "source": [
        "x = tf.keras.layers.Flatten()(vgg.output)\n",
        "prediction = tf.keras.layers.Dense(len(folders),activation = 'softmax')(x)\n",
        "model = tf.keras.models.Model(inputs=vgg.input,outputs=prediction)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# InceptionV3"
      ],
      "metadata": {
        "id": "xB_okPuT4jbt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = InceptionV3(input_shape = IMAGE_SIZE + [3],weights = 'imagenet',include_top = False)"
      ],
      "metadata": {
        "id": "s7TG8LJZ4i8Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for layer in model.layers:\n",
        "  layer.trainable = False"
      ],
      "metadata": {
        "id": "VcvtxU5T3B_r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = tf.keras.layers.Flatten()(model.output)\n",
        "prediction = tf.keras.layers.Dense(len(folders),activation = 'softmax')(x)\n",
        "model = tf.keras.models.Model(inputs=model.input,outputs=prediction)"
      ],
      "metadata": {
        "id": "QZyizrWQ5seO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sgd = tf.keras.optimizers.SGD(learning_rate=0.01, decay=1e-6, momentum=0.9)"
      ],
      "metadata": {
        "id": "XysUmcM56pbZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss=\"categorical_crossentropy\",optimizer = sgd , metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "Ug6esY-A6sj7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9j4B6d3eqZrB"
      },
      "source": [
        "# Learning Rate Scheduling"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "62lw2CYHp572"
      },
      "outputs": [],
      "source": [
        "def exponential_decay_fn(epoch):\n",
        "  return 0.01 * 0.1 ** (epoch / 20)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q7qeG-coqqBk"
      },
      "outputs": [],
      "source": [
        "def exponential_decay(lr0,s):\n",
        "  def exponential_decay_fn(epoch):\n",
        "    return lr0 * 0.1 **(epoch/s)\n",
        "  return exponential_decay_fn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "saspZWWNq3Qw"
      },
      "outputs": [],
      "source": [
        "lr_scheduler = tf.keras.callbacks.LearningRateScheduler(exponential_decay_fn)\n",
        "callbacks = [checkpoint,lr_scheduler]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CbnvPLPurN5q"
      },
      "outputs": [],
      "source": [
        "x = tf.keras.layers.Flatten()(vgg.output)\n",
        "hidden1 = tf.keras.layers.Dense(512,activation = 'relu')(x)\n",
        "hidden2 = tf.keras.layers.Dense(256,activation = 'relu')(hidden1)\n",
        "prediction = tf.keras.layers.Dense(len(folders),activation = 'softmax')(hidden2)\n",
        "model = tf.keras.models.Model(inputs=vgg.input,outputs=prediction)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Project_Tensorfllow.ipynb",
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
